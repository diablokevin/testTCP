using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraBars;
using System.Data.Entity;
using EpServerEngine.cs;

namespace TimerControl
{
  
    public partial class main : DevExpress.XtraBars.Ribbon.RibbonForm, INetworkServerAcceptor, INetworkServerCallback, INetworkSocketCallback
    {
        INetworkServer m_server = new IocpTcpServer();  //TCP服务器对象
        public List<TimerView> Timers = new List<TimerView>();  //储存计时器状态的集合
        public List<EventView> EventViews = new List<EventView>();
        TimerControl.TimerContext timerContext = new TimerControl.TimerContext();
        public main()
        {

            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            serveStatus_start.Visibility = BarItemVisibility.Never;
            serveStatus_stop.Visibility = BarItemVisibility.Always;
            ribbonbtn_serveAct_start.Enabled = true;
            ribbonbtn_serveAct_stop.Enabled = false;
            foreach (Event item in timerContext.Events.ToList())
            {
                EventView eventView = new EventView();
                eventView.Timer.Chip_ID = item.ChipId;
                eventView.Name = item.Name;
                eventView.Time_limit = item.TimeLimit;
                eventView.Id = item.Id;

                EventViews.Add(eventView);


            }




            // This line of code is generated by Data Source Configuration Wizard
            // realTimeSource1.DataSource = Timers;
            // gridControl1.DataSource = realTimeSource1;
            gridControl1.DataSource = EventViews;
            //  gridControl2.DataSource = m_socketList;

            gridControl2.DataSource = Timers;
        


            // This line of code is generated by Data Source Configuration Wizard
            lookUpEdit1.Properties.DataSource = EventViews;
            lookUpEdit1.Properties.ValueMember = "Id";
            lookUpEdit1.Properties.DisplayMember= "Name";
            


        }
        List<INetworkSocket> m_socketList = new List<INetworkSocket>();  //TCP客户端集合
        public INetworkSocketCallback GetSocketCallback()
        {
            return this;
        }

        public bool OnAccept(INetworkServer server, IPInfo ipInfo)
        {
            return true;
        }

        public void OnDisconnect(INetworkSocket socket)
        {
            m_socketList.Remove(socket);
            //gridControl2.Refresh();
            Timers.Remove(Timers.Find(t => t.IpAddress == socket.IPInfo.IPAddress));
            RefreshClientList();
        }
      

        public void OnNewConnection(INetworkSocket socket)
        {
            m_socketList.Add(socket);           
            Timers.Add(new TimerView() { IpAddress = socket.IPInfo.IPAddress });
            
            RefreshClientList();
            cardView1.RefreshData();
        }

        private void RefreshClientList()
        {
           // cardView1.RefreshData();

            tileView1.RefreshData();
        }

        private void RefreshClientList(int row)
        {
            cardView1.RefreshRow(row);

        }
        public void OnReceived(INetworkSocket socket, Packet receivedPacket)
        {
           string cmd = StringFromByteArr(receivedPacket.PacketRaw);
           string[] s=  cmd.Split(',');
            TimerView timerView = FindTimerViaSocket(socket);
           if (s.Count()>=2)
            {
                switch(s[0])
                {
                    case "chipid":
                        timerView.Chip_ID = Convert.ToInt32(s[1]);
                        RegisterChip(timerView);                        
                        break;
                    case "timerstatus":
                        if(timerView.Chip_ID!=null)
                        {
                            timerView.Status = (TimerView.TimerStatus)Convert.ToInt32(s[1]);
                            timerView.Time_used = new TimeSpan(Convert.ToInt64(s[3])/1000 * 10000000);

                        }
                        break;
                    default:
                        break;
                }                
            }
           
        }

        private void RegisterChip(TimerView timerView)
        {
            foreach( EventView eventView in EventViews.FindAll (t => t.Timer.Chip_ID == timerView.Chip_ID))
            {
                eventView.Timer = timerView;
            }

            tileView1.RefreshData();
        }

        public TimerView FindTimerViaSocket(INetworkSocket socket)
        {
            return Timers.Find(t => t.IpAddress == socket.IPInfo.IPAddress);
        }

        public void OnSent(INetworkSocket socket, SendStatus status, Packet sentPacket)
        {
            switch (status)
            {
                case SendStatus.SUCCESS:
                    SetTipMessage("Send success");
                    break;
                case SendStatus.FAIL_CONNECTION_CLOSING:
                    SetTipMessage("Send fail,FAIL_CONNECTION_CLOSING");
                    break;
                case SendStatus.FAIL_INVALID_PACKET:
                    SetTipMessage("Send fail,FAIL_INVALID_PACKET");
                    break;
                case SendStatus.FAIL_NOT_CONNECTED:
                    SetTipMessage("Send fail,FAIL_NOT_CONNECTED");
                    break;
                case SendStatus.FAIL_SOCKET_ERROR:
                    SetTipMessage("Send fail,FAIL_SOCKET_ERROR");
                    break;

            }
        }
        public void SetTipMessage(string message)
        {
            barStatusTxt.Caption = message;
        }
        public void OnServerAccepted(INetworkServer server, INetworkSocket socket)
        {
           // throw new NotImplementedException();
        }

        public void OnServerStarted(INetworkServer server, StartStatus status)
        {
            //TCP服务器启动
            serveStatus_start.Visibility = BarItemVisibility.Always;
            serveStatus_stop.Visibility = BarItemVisibility.Never;

            ribbonbtn_serveAct_start.Enabled = false;
            ribbonbtn_serveAct_stop.Enabled = true;

        }

        public void OnServerStopped(INetworkServer server)
        {
            serveStatus_start.Visibility = BarItemVisibility.Never;
            serveStatus_stop.Visibility = BarItemVisibility.Always;
            ribbonbtn_serveAct_start.Enabled = true;
            ribbonbtn_serveAct_stop.Enabled = false;
        }


        String StringFromByteArr(byte[] bytes)
        {
            char[] chars = new char[bytes.Length / sizeof(char)];
            System.Buffer.BlockCopy(bytes, 0, chars, 0, bytes.Length);
            return new string(chars);
        }


        byte[] BytesFromString(String str, string encoding)
        {
            byte[] bytes_encoding = Encoding.GetEncoding(encoding).GetBytes(str);
            return bytes_encoding;
        }


        private void barButtonItem1_ItemClick(object sender, ItemClickEventArgs e)
        {
            ServerOps ops = new ServerOps(this, ribbontxt_port.EditValue.ToString(), this);
            m_server.StartServer(ops);
        }

        private void barButtonItem3_ItemClick(object sender, ItemClickEventArgs e)
        {
            EventEdit form = new EventEdit();
            form.Show();
        }

        private void barButtonItem2_ItemClick(object sender, ItemClickEventArgs e)
        {
            if (m_server.IsServerStarted)
            {
                m_server.StopServer();

            }
        }

        private void barButtonItem1_ItemClick_1(object sender, ItemClickEventArgs e)
        {
            Random r = new Random();
            int n = r.Next(0, Timers.Count());
            Timers[n].Chip_ID = r.Next();


          //  gridView1.RefreshData();
            cardView1.RefreshRow(n);
          
       

        }

        private void tableLayoutPanel1_Paint(object sender, PaintEventArgs e)
        {

        }

        private void barButtonItem5_ItemClick(object sender, ItemClickEventArgs e)
        {
            Form1 fr = new Form1();
            fr.Show();
        }

        private void barButtonItem2_ItemClick_1(object sender, ItemClickEventArgs e)
        {
           BroadcastMessage("timerstart");
           
        }

        private void BroadcastMessage(string sendText)
        {
            byte[] bytes = BytesFromString(sendText, "gb2312");
            Packet packet = new Packet(bytes, 0, bytes.Count(), false);
            m_server.Broadcast(packet);
        }

        private void barButtonItem4_ItemClick(object sender, ItemClickEventArgs e)
        {
            BroadcastMessage("timerstop");
        }



        private void barButtonItem8_ItemClick(object sender, ItemClickEventArgs e)
        {
            BroadcastMessage("devicereset");
        }

        private void barButtonItem9_ItemClick(object sender, ItemClickEventArgs e)
        {
            BroadcastMessage("timerreset");
        }

        private void timer1_Tick(object sender, EventArgs e)
        {
            RefreshClientList();
        }

        private void simpleButton1_Click(object sender, EventArgs e)
        {
            if(lookUpEdit1.EditValue!=null)   //选择了项目再继续
            {
                int[] rowhandles = cardView1.GetSelectedRows(); //确定选择了哪行
                if (rowhandles.Count() > 0)
                {
                    foreach (int rowhandle in rowhandles)  //可以处理多选
                    {
                        try
                        {
                            int chipid = Convert.ToInt32(cardView1.GetRowCellValue(rowhandle, "Chip_ID"));  //查找view里的chipid
                            int eventid = Convert.ToInt32(lookUpEdit1.EditValue);  //查找对应的比赛项目id

                            EventViews.Find(t => t.Id == eventid).Timer.Chip_ID = chipid;  //设置内存里EventView里的chipid
                            timerContext.Events.First(t => t.Id == eventid).ChipId = chipid;//修改数据库里的event的chipid
                            timerContext.SaveChanges();

                        }
                        catch (Exception ex)
                        {
                            throw ex;
                        }
                        finally
                        {

                        }

                    }

                }
            }
            else
            {
                MessageBox.Show("请选择一个项目");
            }
            
        }
    }
}